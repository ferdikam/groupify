# scripts/setup-project.sh
#!/bin/bash
set -e

PROJECT_PATH=$1
GITHUB_REPO=$2
GITHUB_TOKEN=$3

echo "üìÇ Configuration du projet..."
echo "üîç Debug - Arguments re√ßus:"
echo "   PROJECT_PATH: '$PROJECT_PATH'"
echo "   GITHUB_REPO: '$GITHUB_REPO'"
echo "   GITHUB_TOKEN: $([ -n "$GITHUB_TOKEN" ] && echo '[SET]' || echo '[NOT SET]')"

# V√©rifier que les arguments obligatoires sont fournis
if [ -z "$PROJECT_PATH" ]; then
    echo "‚ùå Erreur: PROJECT_PATH est vide ou non d√©fini"
    echo "üí° V√©rifiez que le secret PROJECT_PATH est configur√© dans GitHub"
    exit 1
fi

if [ -z "$GITHUB_REPO" ]; then
    echo "‚ùå Erreur: GITHUB_REPO est vide ou non d√©fini"
    exit 1
fi

# Pr√©fixe pour les commandes privil√©gi√©es
SUDO=""
if [ "$EUID" -ne 0 ] && command -v sudo &> /dev/null; then
    SUDO="sudo"
fi

# Nettoyer et recr√©er le r√©pertoire si n√©cessaire
if [ -d "$PROJECT_PATH" ]; then
    echo "üìÑ R√©pertoire existant d√©tect√©, nettoyage..."
    rm -rf "$PROJECT_PATH"
fi

echo "üì• Clonage du repository..."
echo "üéØ Cr√©ation du r√©pertoire parent: $(dirname "$PROJECT_PATH")"
mkdir -p "$(dirname "$PROJECT_PATH")"

# Construire l'URL avec token si fourni
if [ -n "$GITHUB_TOKEN" ]; then
    CLONE_URL="https://${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git"
    echo "üîê Utilisation du token GitHub pour le clonage..."
else
    CLONE_URL="https://github.com/${GITHUB_REPO}.git"
    echo "üåê Clonage public du repository..."
fi

echo "üìÇ Clonage vers: $PROJECT_PATH"
echo "üîó URL de clonage: https://github.com/${GITHUB_REPO}.git"

# Cloner le repository
git clone "$CLONE_URL" "$PROJECT_PATH"

# V√©rifier que le clonage a r√©ussi
if [ ! -d "$PROJECT_PATH/.git" ]; then
    echo "‚ùå Erreur: Le clonage Git a √©chou√©"
    echo "üí° V√©rifiez que:"
    echo "   - Le repository existe: https://github.com/$GITHUB_REPO"
    echo "   - Le repository est public OU vous avez fourni un token valide"
    echo "   - Votre serveur peut acc√©der √† GitHub"
    exit 1
fi

echo "üìã Repository clon√© avec succ√®s"
cd "$PROJECT_PATH"

# V√©rifier la branche main/master
if git show-ref --verify --quiet refs/heads/main; then
    BRANCH="main"
elif git show-ref --verify --quiet refs/heads/master; then
    BRANCH="master"
else
    BRANCH=$(git rev-parse --abbrev-ref HEAD)
fi

echo "üìå Utilisation de la branche: $BRANCH"

# S'assurer qu'on est sur la bonne branche
git checkout "$BRANCH"

# Nettoyer les credentials Git pour la s√©curit√©
if [ -n "$GITHUB_TOKEN" ]; then
    git remote set-url origin "https://github.com/${GITHUB_REPO}.git"
fi

# Utiliser sudo seulement si n√©cessaire et disponible
if [ -n "$SUDO" ]; then
    $SUDO chown -R $USER:$USER "$PROJECT_PATH"
else
    chown -R $USER:$USER "$PROJECT_PATH" 2>/dev/null || echo "‚ö†Ô∏è Impossible de changer les permissions - continuons"
fi

echo "‚úÖ Projet configur√© avec succ√®s dans: $PROJECT_PATH"
