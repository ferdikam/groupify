# .github/workflows/deploy.yml
name: Deploy Laravel Filament

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Copy deployment scripts to server
        run: |
          scp -r ./scripts ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "chmod +x /tmp/scripts/*.sh"

      - name: Install production environment
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "/tmp/scripts/install-environment.sh"

      - name: Verify secrets configuration
        run: |
          echo "🔍 Vérification des secrets (les valeurs ne s'affichent pas pour la sécurité):"
          echo "PROJECT_PATH défini: ${{ secrets.PROJECT_PATH != '' }}"
          echo "SERVER_USER défini: ${{ secrets.SERVER_USER != '' }}"
          echo "SERVER_HOST défini: ${{ secrets.SERVER_HOST != '' }}"
          echo "Repository: ${{ github.repository }}"

      - name: Setup project (Alternative - Upload code directly)
        run: |
          PROJECT_PATH="${{ secrets.PROJECT_PATH }}"
          if [ -z "$PROJECT_PATH" ]; then
            PROJECT_PATH="/home/deploy/groupify"
            echo "✅ Utilisation du chemin par défaut: $PROJECT_PATH"
          else
            echo "✅ Utilisation du PROJECT_PATH configuré: $PROJECT_PATH"
          fi

          # Créer une archive du code source (exclure plus de fichiers)
          echo "📦 Création de l'archive du projet..."
          tar -czf project.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.github' \
            --exclude='vendor' \
            --exclude='storage/logs' \
            --exclude='*.log' \
            --exclude='.env' \
            --warning=no-file-changed \
            .

          echo "📤 Envoi de l'archive au serveur..."
          scp project.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

          echo "🚀 Configuration du projet sur le serveur..."
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            set -e
            echo '🧹 Nettoyage du répertoire cible...'
            rm -rf '$PROJECT_PATH'
            mkdir -p '$PROJECT_PATH'

            echo '📂 Extraction de l archive...'
            tar -xzf /tmp/project.tar.gz -C '$PROJECT_PATH'

            echo '🔧 Configuration Git...'
            cd '$PROJECT_PATH'
            git init
            git add .
            git commit -m 'Initial deployment commit' || echo 'Git commit ignoré'

            echo '🔑 Configuration des permissions...'
            chown -R \$USER:\$USER '$PROJECT_PATH' 2>/dev/null || sudo chown -R \$USER:\$USER '$PROJECT_PATH' || echo 'Permissions OK'

            echo '🧹 Nettoyage temporaire...'
            rm -f /tmp/project.tar.gz

            echo '✅ Projet configuré dans: $PROJECT_PATH'
          "

      - name: Create Docker configurations (AVANT le build)
        run: |
          PROJECT_PATH="${{ secrets.PROJECT_PATH }}"
          if [ -z "$PROJECT_PATH" ]; then
            PROJECT_PATH="/home/deploy/groupify"
          fi

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "/tmp/scripts/create-docker-configs.sh '$PROJECT_PATH' '${{ secrets.DOMAIN_NAME }}'"

      - name: Create Docker configurations (AVANT le build)
        run: |
          PROJECT_PATH="${{ secrets.PROJECT_PATH }}"
          if [ -z "$PROJECT_PATH" ]; then
            PROJECT_PATH="/home/deploy/groupify"
          fi

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "/tmp/scripts/create-docker-configs.sh '$PROJECT_PATH' '${{ secrets.DOMAIN_NAME }}'"

      - name: Deploy application
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          SSL_EMAIL: ${{ secrets.SSL_EMAIL }}
        run: |
          PROJECT_PATH="${{ secrets.PROJECT_PATH }}"
          if [ -z "$PROJECT_PATH" ]; then
            PROJECT_PATH="/home/deploy/groupify"
          fi

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "/tmp/scripts/deploy-app.sh '$PROJECT_PATH' '$APP_KEY' '$DB_DATABASE' '$DB_USERNAME' '$DB_PASSWORD' '$DOMAIN_NAME' '$SSL_EMAIL'"

      - name: Setup SSL
        run: |
          PROJECT_PATH="${{ secrets.PROJECT_PATH }}"
          if [ -z "$PROJECT_PATH" ]; then
            PROJECT_PATH="/home/deploy/groupify"
          fi

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "/tmp/scripts/setup-ssl.sh '$PROJECT_PATH' '${{ secrets.DOMAIN_NAME }}'"

      - name: Verify deployment
        run: |
          sleep 15
          curl -I http://${{ secrets.DOMAIN_NAME }} || echo "HTTP test completed"
          curl -I https://${{ secrets.DOMAIN_NAME }} || echo "HTTPS test completed"
