# .github/workflows/deploy.yml
name: Deploy Laravel Filament

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            cd ${{ secrets.PROJECT_PATH }} &&
            git pull origin main &&

            # Création du fichier .env s'il n'existe pas
            if [ ! -f .env ]; then
              cp .env.example .env
              echo 'DB_DATABASE=${{ secrets.DB_DATABASE }}' >> .env
              echo 'DB_USERNAME=${{ secrets.DB_USERNAME }}' >> .env
              echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env
              echo 'DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}' >> .env
              echo 'SSL_EMAIL=${{ secrets.SSL_EMAIL }}' >> .env
              echo 'APP_KEY=${{ secrets.APP_KEY }}' >> .env
              echo 'APP_URL=https://${{ secrets.DOMAIN_NAME }}' >> .env
              echo 'APP_ENV=production' >> .env
              echo 'APP_DEBUG=false' >> .env
            fi &&

            # Arrêt des conteneurs existants
            docker-compose down &&

            # Construction et démarrage
            docker-compose build --no-cache &&
            docker-compose up -d &&

            # Attendre que MySQL soit prêt
            sleep 30 &&

            # Migrations et optimisations Laravel
            docker-compose exec -T app php artisan migrate --force &&
            docker-compose exec -T app php artisan config:cache &&
            docker-compose exec -T app php artisan route:cache &&
            docker-compose exec -T app php artisan view:cache &&
            docker-compose exec -T app php artisan storage:link &&

            # Configuration SSL (première fois)
            if [ ! -f /var/lib/docker/volumes/\$(docker volume ls -q | grep certbot_certs)/_data/live/${{ secrets.DOMAIN_NAME }}/fullchain.pem ]; then
              docker-compose run --rm certbot
              docker-compose restart nginx
            fi &&

            # Nettoyage
            docker system prune -af
          "

      - name: Verify deployment
        run: |
          sleep 10
          curl -f https://${{ secrets.DOMAIN_NAME }} || exit 1
