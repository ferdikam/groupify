# .github/workflows/deploy.yml
name: Deploy Laravel Filament

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Copy deployment scripts to server
        run: |
          scp -r ./scripts ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "chmod +x /tmp/scripts/*.sh"

      - name: Install production environment
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "/tmp/scripts/install-environment.sh"

      - name: Verify secrets configuration
        run: |
          echo "üîç V√©rification des secrets (les valeurs ne s'affichent pas pour la s√©curit√©):"
          echo "PROJECT_PATH d√©fini: ${{ secrets.PROJECT_PATH != '' }}"
          echo "SERVER_USER d√©fini: ${{ secrets.SERVER_USER != '' }}"
          echo "SERVER_HOST d√©fini: ${{ secrets.SERVER_HOST != '' }}"
          echo "Repository: ${{ github.repository }}"

      - name: Setup project (Alternative - Upload code directly)
        run: |
          # Force la valeur par d√©faut pour √©viter les probl√®mes
          PROJECT_PATH="/home/deploy/groupify"
          echo "‚úÖ Utilisation du chemin fixe: $PROJECT_PATH"

          # Cr√©er une archive du code source avec gestion d'erreurs
          echo "üì¶ Cr√©ation de l'archive du projet..."
          tar -czf project.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.github' \
            --exclude='vendor' \
            --exclude='storage/logs' \
            --exclude='storage/framework/cache' \
            --exclude='*.log' \
            --exclude='.env' \
            --warning=no-file-changed \
            --ignore-failed-read \
            . || {
              echo "‚ö†Ô∏è Erreur tar, essai avec m√©thode alternative..."
              find . -type f \
                ! -path './.git/*' \
                ! -path './node_modules/*' \
                ! -path './.github/*' \
                ! -path './vendor/*' \
                ! -name '*.log' \
                -print0 | tar -czf project.tar.gz --null -T -
            }

          echo "üì§ Envoi de l'archive au serveur ($(du -h project.tar.gz | cut -f1))..."
          scp project.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

          echo "üöÄ Configuration du projet sur le serveur..."
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            set -e

            PROJECT_PATH='/home/deploy/groupify'
            echo 'üìç Chemin cible: \$PROJECT_PATH'

            echo 'üßπ Nettoyage du r√©pertoire cible...'
            rm -rf \"\$PROJECT_PATH\"
            mkdir -p \"\$PROJECT_PATH\"

            echo 'üìÇ Extraction de l archive...'
            cd \"\$PROJECT_PATH\"
            tar -xzf /tmp/project.tar.gz

            echo 'üîß Configuration Git...'
            git init || echo 'Git init ignor√©'
            git add . || echo 'Git add ignor√©'
            git commit -m 'Initial deployment commit' || echo 'Git commit ignor√©'

            echo 'üîë Configuration des permissions...'
            chown -R \$USER:\$USER \"\$PROJECT_PATH\" 2>/dev/null || sudo chown -R \$USER:\$USER \"\$PROJECT_PATH\" || echo 'Permissions d√©j√† OK'

            echo 'üìã V√©rification du contenu...'
            ls -la \"\$PROJECT_PATH\" | head -10

            echo 'üßπ Nettoyage temporaire...'
            rm -f /tmp/project.tar.gz

            echo '‚úÖ Projet configur√© avec succ√®s dans: \$PROJECT_PATH'
          "

      - name: Create Docker configurations
        run: |
          PROJECT_PATH="/home/deploy/groupify"
          echo "üê≥ Configuration Docker pour: $PROJECT_PATH"

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "/tmp/scripts/create-docker-configs.sh '$PROJECT_PATH' '${{ secrets.DOMAIN_NAME }}'"

      - name: Deploy application (HTTP Only)
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          SSL_EMAIL: ${{ secrets.SSL_EMAIL }}
        run: |
          PROJECT_PATH="/home/deploy/groupify"
          echo "üöÄ D√©ploiement HTTP vers: $PROJECT_PATH"

          # Note: Nouveau format du script deploy-app.sh (4 param√®tres au lieu de 7)
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "/tmp/scripts/deploy-app.sh '$PROJECT_PATH' '$APP_KEY' '$DOMAIN_NAME' '$SSL_EMAIL'"

      - name: Setup SSL (Optional)
        if: ${{ secrets.ENABLE_SSL == 'true' }}
        run: |
          PROJECT_PATH="/home/deploy/groupify"
          echo "üîí Configuration SSL pour: $PROJECT_PATH"

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "/tmp/scripts/setup-ssl.sh '$PROJECT_PATH' '${{ secrets.DOMAIN_NAME }}'"

      - name: Verify deployment
        run: |
          sleep 15
          curl -I http://${{ secrets.DOMAIN_NAME }} || echo "HTTP test completed"

          # Afficher les logs en cas de probl√®me
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            cd /home/deploy/groupify
            echo 'üìä Statut des conteneurs:'
            docker-compose ps
            echo 'üìã Logs r√©cents:'
            docker-compose logs --tail=20
          "
